name: build and test develop branch
on: 
  pull_request:
    branches: [ develop ]
    types: [ opened, reopened ] 
jobs: 
  build-feature:
    runs-on: ubuntu-latest
    steps: 

# 2. descarga el codigo de la rama feature, configura entorno de java y valida si el codigo es compilable  


    - uses: actions/checkout@v3
      with:
        ref: ${{ github.event.pull_request.head.sha }}

    - name: pull and checkout from git repository
      run:
        echo "pulling and checking out from git repository"

    - name: setup java 17
      uses: actions/setup-java@v3
      with: 
        distribution: 'temurin' #see 'supported distributions' for availible options'
        java-version: '17'
      
    - name: Cache Maven dependencies
      uses: actions/cache@v2
      with: 
        path: ~/.m2/repository
        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
        restore-keys: 
          ${{ runner.os }}-maven- 

    - name: build with maven
      run: |
          mvn clean test package
          echo "build with maven" 

# 3. Realiza validacion de build feature y acciones para  Automatic merge  en Develop

  merge-feature-into-develop:
    runs-on: ubuntu-latest
    needs: build-feature
    if: ${{ success() }}
#    #para un job especifico se puede utilizar <job_id>.permissions para modificar los permisos del TOKEN_ACTIONS
    permissions:
      contents: write
      pull-requests: write
    steps:
#      # descargar source code
      # Solo un commit sera fetched por default,  for the ref/sha que sera lanzado en el workflow fetch_dept se definira en 0 para toda la history de todas las ramas
      - uses: actions/checkout@v3
        with:
        #descarga el codigo desde la rama destino "develop" o rama.base
          ref: ${{ github.base_ref }}
          fetch-depth: 0
        
#        #Merge a develop
    #  - name: Merge to development branch
    #    if: ${{ success() }}
    #    run: |
    #      echo ${{ github.event.pull_request.head.ref }} 
    #      echo ${{ github.event.number }}
    #      git config --global user.email "ectinev@hotmail.com" 
    #      git config --global user.name "rulues"
          #using -m "message" on merge command ins mandatori here in order to avoid open a text editor to write a commit message
          #Usando -m "message" en el comando merge es obliugatorio para evitaer que se abra un editor de texto y se solicite que se envie un message
    #      git merge --no-ff --verbose origin/${{ github.event.pull_request.head.ref }} -m "Merge pull request #${{ github.event.number }}"
           
      
#     # Push Changes after merge
#      - name: Push changes after merge
#        if: ${{ success() }}
#        uses: ad-m/github-push-action@master
#        with:
#          github_token: $ {{ secrets.TOKEN }}
#          branch: ${{ github.base_ref }}

   # llama analisis Sonar


  build-scan-sonarqube:
    runs-on: ubuntu-latest
    needs: build-feature
    if: ${{ success() }}
    steps:
      # descargar source code
      # Solo un commit sera fetched por default,  for the ref/sha que sera lanzado en el workflow fetch_dept se definira en 0 para toda la history de todas las ramas
      - uses: actions/checkout@v3
        with:
        #descarga el codigo desde la rama destino "develop" o rama.base
 
          fetch-depth: 0
      - name: Set up JDK 17
        uses: actions/setup-java@v1
        with:
          java-version: 17

      - name: Cache SonarQube packages
        uses: actions/cache@v1
        with:
          path: ~/.sonar/cache
          key: '${{ runner.os }}-sonar'
          restore-keys: '${{ runner.os }}-sonar'

      - name: Cache Maven packages
        uses: actions/cache@v1
        with:
          path: ~/.m2
          key: '${{ runner.os }}-m2-${{ hashFiles(''**/pom.xml'') }}'
          restore-keys: '${{ runner.os }}-m2'

      - name: SonarQube Scan
        #uses: sonarsource/sonarqube-scan-action@master
        env:
          SONAR_TOKEN: '${{ secrets.SONAR_TOKEN }}'
          SONAR_HOST_URL: '${{ secrets.SONAR_HOST_URL }}'
        run: >-
          mvn -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar
          -Dsonar.projectKey=producto-service
          -Dsonar.projectName='producto-service'

      - name: SonarQube Quality Gate check
        id: sonarqube-quality-gate-check
        uses: sonarsource/sonarqube-quality-gate-action@master
        with:
          scanMetadataReportFile: target/sonar/report-task.txt
      #uses: opsverseio/sonarqube-quality-gate-action@v2.3.0
       # Force to fail step after specific time.
        timeout-minutes: 1
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }} #OPTIONAL
          SET_SONAR_PROJECT_STATUS: true 
    #  # Optionally you can use the output from the Quality Gate in another step.
    #  # The possible outputs of the `quality-gate-status` variable are `PASSED`, `WARN` or `FAILED`.
      - name: SonarQube Quality Gate Status 
        run: |
          echo "The Quality Gate status is ${{ steps.sonarqube-quality-gate-check.outputs.quality-gate-status }}"


   # llama publish jar

      - name: trigger deploy artifact
        if: success()
        uses: peter-evans/repository-dispatch@v2
        with:
            token: ${{ secrets.TOKEN }}
            repository: ${{ github.repository }}
            event-type: publish-artifact-event
            client-payload: '{ "base_branch": "${{ github.base_ref }}" }'

      - name: trigger deploy artifact
        if: success()
        uses: peter-evans/repository-dispatch@v2
        with:
            token: ${{ secrets.TOKEN }}
            repository: ${{ github.repository }}
            event-type: fortify-scan-event
            client-payload: '{ "base_branch": "${{ github.base_ref }}" }'

    
