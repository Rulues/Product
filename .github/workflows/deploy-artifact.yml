name: Deploy artifact
on:
  repository_dispatch:
    types: [deploy-artifact-event]
jobs:
  dowlonad-artifact-job:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      actions: read
    steps:

# Devuelve parametros desde payload y descarga el artefacto


      - run: echo ${{ github.event.client_payload.checksum }}

      - name: Retrieve Payload
        run: |
          echo ${{ github.event.client_payload.checksum }}
          echo ${{ github.event.client_payload.artifact_name }}
          echo ${{ github.repository_owner}}
          echo ${{ github.event.client_payload.artefact_name }}
           

# Descarga elemento generado por otro workflow

      - uses: dawidd6/action-download-artifact@v3
        id: download-artifact
        with: 
          github_token: ${{ secrets.TOKEN }}
          workflow: publish-jar.yml
          workflow_conclusion: success
          name: artifactjar
          path: /tmp/artifactjar

    #lista directorio temporal asegurarnos que si se ejecuto la descarga 
      - name: Display structure of downloaded files
        run: ls -R /tmp/artifactjar 

      - name: checksum of download artifact  
        if: success()
        id: hash
        run:  |
              echo ${{ github.sha }}
              echo ${{ github.repository_owner}}
              echo "HASH=$(sha1sum /tmp/artifactjar/${{ github.event.client_payload.artifact_name }} | awk '{ print $1 }')" >> $GITHUB_ENV

    # Seguridad valida archivos no esten corruptos o da√±ados
      - name: compare checksum
        run: |
          if [ "${{ env.HASH }}" == "${{ github.event.client_payload.checksum }}" ]; then 
              echo "The checksum are equals! successfully operations"
          else
              echo "The cheksum are NOT equals! failure operation."
              exit 1;
          fi

# Descarga source code de la rama default para poder devolver Dockerfile y cargar la imagen ak cibtexti 


      - uses: actions/checkout@v4
        if: success()
      - run: |
          echo print the current directory show files
          ls -la 
          echo preparing docker build context 
          cp .docker/Dockerfile /tmp/Dockerfile
          cp /tmp/artifactjar/${{ github.event.client_payload.artifact_name }} /tmp/${{ github.event.client_payload.artifact_name }}
          ls -la /tmp

      - name: upload artifact 
        uses: actions/upload-artifact@v4
        with:
          name: dockerBuildContext
          path: |
            /tmp/Dockerfile
            /tmp/${{ github.event.client_payload.artifact_name }}

###################################################
#Job 2 para administrar las tareas de docker
###################################################
  docker_job:
    needs:
      - dowlonad-artifact-job

    runs-on: ubuntu-latest
    permissions:
      contents: read 
      actions: read
      packages: write
      
    steps:

    #1.-  Instaran el emulador QEMU
    - name : Set up QEMU
      uses : docker/setup-qemu-action@v3

    #2.-  instalr docker buildx
    - name : Set up Docker Buildx 
      uses : docker/setup-buildx-action@v2

    #3.- login Docker Hub
    - name : Login to Docker Hub
      uses : docker/login-action@v2
      with :
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.TOKEN }}
        logout: false

    #4.- Descarga artifact
    - name:  Download artifact
      uses:  actions/download-artifact@v4
      with: 
        name: dockerBuildContext
        path: ./dockerBuildContext 
    
    #5.- Muestra la estructura
    - name: Display structure of downloaded  files
      run: ls -R dockerBuildContext

     #6.- Muestra la estructura 
    - name: Build and push image using action
      uses: docker/build-push-action@v6
      with: 
        context:  ./dockerBuildContext # Ubicacion donde se almacenan los archivos dockerfile y artifact
        file : ./dockerBuildContext/Dockerfile #Ubicacion del dockerfile
        # parametros requeridos por el dockerfile
        build-args:  |
          JAR_FILE=${{ github.event.client_payload.artifact_name }} 
          DB_PASSWORD=${{ secrets.DB_PASSWORD }}
        push: true # Sube la imagen al registry, se encuentra en false por Default
        tags: ghcr.io/${{ github.repository_owner}}/product:${{ github.sha }} #nombre completo de la imagen, incluye el repositorio, usuario, nombre de la imagen y tag
    
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1
    
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Push Image to Amazon ECR
      id: push-image
      env:
        ECR-REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR-REPOSITORY: product-app
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

    - name: Fill in the new image ID  in the Amazon ECS task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with: 
        task-definition: .src/main/resources/task-definition.json
        container-name: producto-app
        image: ${{ steps.build-image.outputs.image }}
    
    - name: Deploy AMAZON ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: product-app-service
        cluster: product-cluster
        wait-for-service-stability: true 
